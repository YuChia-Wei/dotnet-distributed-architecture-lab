version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:4.1.2-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - kafka_data:/bitnami/kafka
    environment:
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,PLAINTEXT_HOST://:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # A cluster ID is required for KRaft mode. This is a generated one.
      - CLUSTER_ID=Lpaefz4gR4q_4Y-d-d-d-Q

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    ports:
      - "19000:9000"
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
    depends_on:
      - kafka

  postgres-order:
    image: postgres:16-alpine
    container_name: postgres-order
    ports:
      - "5433:5432"
    volumes:
      - postgres_order_data:/var/lib/postgresql/data
      # copy the sql script to create tables
      - ./sql-script/create_orders_table.sql:/docker-entrypoint-initdb.d/create_orders_table.sql
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=orders_db

  postgres-product:
    image: postgres:16-alpine
    container_name: postgres-product
    ports:
      - "5434:5432"
    volumes:
      - postgres_product_data:/var/lib/postgresql/data
      # copy the sql script to fill tables
      - ./sql-script/create_products_table.sql:/docker-entrypoint-initdb.d/create_products_table.sql
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=products_db

  orders-api:
    build:
      context: ../src
      dockerfile: ../src/Order/Presentation/SaleOrders.WebApi/Dockerfile
    container_name: orders-api
    environment:
      - QUEUE_SERVICE=Kafka
      - ConnectionStrings__MessageBroker=amqp://guest:guest@rabbitmq:5672
      - ConnectionStrings__KafkaBroker=kafka:9092
      - ConnectionStrings__DefaultConnection=User ID=user;Password=password;Host=postgres-order;Port=5432;Database=orders_db;Pooling=true;
    ports:
      - "8080:8080"
      - "8081:8081"
    depends_on:
      - rabbitmq
      - postgres-order
      - kafka

  orders-consumer:
    build:
      context: ../src
      dockerfile: ../src/Order/Presentation/SaleOrders.Consumer/Dockerfile
    container_name: orders-consumer
    environment:
      - QUEUE_SERVICE=Kafka
#      - BrokerConnectionString=amqp://guest:guest@rabbitmq:5672
      - BrokerConnectionString=kafka:9092
    depends_on:
      - rabbitmq
      - postgres-order
      - kafka

  product-api:
    build:
      context: ../src
      dockerfile: ../src/Product/Presentation/SaleProducts.WebApi/Dockerfile
    container_name: product-api
    environment:
      - QUEUE_SERVICE=Kafka
      - ConnectionStrings__MessageBroker=amqp://guest:guest@rabbitmq:5672
      - ConnectionStrings__KafkaBroker=kafka:9092
      - ConnectionStrings__DefaultConnection=User ID=user;Password=password;Host=postgres-product;Port=5432;Database=products_db;Pooling=true;
    ports:
      - "8090:8080"
      - "8091:8081"
    depends_on:
      - rabbitmq
      - postgres-product
      - kafka

  product-consumer:
    build:
      context: ../src
      dockerfile: ../src/Product/Presentation/SaleProducts.Consumer/Dockerfile
    container_name: product-consumer
    environment:
      - QUEUE_SERVICE=Kafka
#      - BrokerConnectionString=amqp://guest:guest@rabbitmq:5672
      - BrokerConnectionString=kafka:9092
    depends_on:
      - rabbitmq
      - postgres-product
      - kafka

volumes:
  rabbitmq_data:
  postgres_order_data:
  postgres_product_data:
  kafka_data: